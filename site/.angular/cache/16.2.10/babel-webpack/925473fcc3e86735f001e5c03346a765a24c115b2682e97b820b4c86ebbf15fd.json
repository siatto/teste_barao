{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../servicos/auth.service\";\nimport * as i3 from \"../app.config\";\nexport class LocalidadeService {\n  constructor(http, authService, appConfig) {\n    this.http = http;\n    this.authService = authService;\n    this.appConfig = appConfig;\n    this.apiUrl = `${this.appConfig.getApiUrl()}/localidade`;\n    this.apiViaCepUrl = 'https://viacep.com.br/ws';\n  }\n  getHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  listarLocalidades() {\n    return this.http.get(this.apiUrl);\n  }\n  obterLocalidadePorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  obterLocalidadesPorLogradouro(logradouro) {\n    return this.http.get(`${this.apiUrl}/por-logradouro/${logradouro}`);\n  }\n  salvarLocalidade(localidade) {\n    return this.http.post(this.apiUrl, localidade, {\n      headers: this.getHeaders()\n    });\n  }\n  atualizarLocalidade(localidade) {\n    return this.http.put(`${this.apiUrl}`, localidade, {\n      headers: this.getHeaders()\n    });\n  }\n  excluirLocalidade(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: this.getHeaders()\n    });\n  }\n  obterDetalhesCEP(cep) {\n    const url = `${this.apiViaCepUrl}/${cep}/json`;\n    return this.http.get(url);\n  }\n  static #_ = this.ɵfac = function LocalidadeService_Factory(t) {\n    return new (t || LocalidadeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService), i0.ɵɵinject(i3.AppConfig));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalidadeService,\n    factory: LocalidadeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","LocalidadeService","constructor","http","authService","appConfig","apiUrl","getApiUrl","apiViaCepUrl","getHeaders","token","getToken","listarLocalidades","get","obterLocalidadePorId","id","obterLocalidadesPorLogradouro","logradouro","salvarLocalidade","localidade","post","headers","atualizarLocalidade","put","excluirLocalidade","delete","obterDetalhesCEP","cep","url","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","i3","AppConfig","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\belfe\\OneDrive\\Área de Trabalho\\avaliacao\\avaliacao-dotnet_angular\\site\\src\\app\\servicos\\localidade.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { Observable } from 'rxjs';\r\nimport { Localidade } from '../modelos/localidade';\r\nimport { AuthService } from '../servicos/auth.service';\r\n\r\nimport { AppConfig } from '../app.config';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalidadeService {\r\n  private apiUrl = `${this.appConfig.getApiUrl()}/localidade`;\r\n  private apiViaCepUrl = 'https://viacep.com.br/ws';\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService, private appConfig: AppConfig) { }\r\n\r\n  private getHeaders (): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  listarLocalidades (): Observable<Localidade[]> {\r\n    return this.http.get<Localidade[]>(this.apiUrl);\r\n  }\r\n\r\n  obterLocalidadePorId (id: string): Observable<Localidade> {\r\n    return this.http.get<Localidade>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  obterLocalidadesPorLogradouro (logradouro: string): Observable<Localidade[]> {\r\n    return this.http.get<Localidade[]>(`${this.apiUrl}/por-logradouro/${logradouro}`);\r\n  }\r\n\r\n  salvarLocalidade (localidade: Localidade): Observable<Localidade> {\r\n    return this.http.post<Localidade>(this.apiUrl, localidade, { headers: this.getHeaders() });\r\n  }\r\n\r\n  atualizarLocalidade (localidade: Localidade): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}`, localidade, { headers: this.getHeaders() });\r\n  }\r\n\r\n  excluirLocalidade (id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`, { headers: this.getHeaders() });\r\n  }\r\n\r\n  obterDetalhesCEP (cep: string): Observable<any> {\r\n    const url = `${this.apiViaCepUrl}/${cep}/json`;\r\n    return this.http.get<any>(url);\r\n  }\r\n}\r\n"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;;AAU9D,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB,EAAUC,WAAwB,EAAUC,SAAoB;IAAhF,KAAAF,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAAuB,KAAAC,SAAS,GAATA,SAAS;IAHjF,KAAAC,MAAM,GAAG,GAAG,IAAI,CAACD,SAAS,CAACE,SAAS,EAAE,aAAa;IACnD,KAAAC,YAAY,GAAG,0BAA0B;EAEuD;EAEhGC,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACN,WAAW,CAACO,QAAQ,EAAE;IACzC,OAAO,IAAIX,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUU,KAAK;KACjC,CAAC;EACJ;EAEAE,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAe,IAAI,CAACP,MAAM,CAAC;EACjD;EAEAQ,oBAAoBA,CAAEC,EAAU;IAC9B,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAa,GAAG,IAAI,CAACP,MAAM,IAAIS,EAAE,EAAE,CAAC;EAC1D;EAEAC,6BAA6BA,CAAEC,UAAkB;IAC/C,OAAO,IAAI,CAACd,IAAI,CAACU,GAAG,CAAe,GAAG,IAAI,CAACP,MAAM,mBAAmBW,UAAU,EAAE,CAAC;EACnF;EAEAC,gBAAgBA,CAAEC,UAAsB;IACtC,OAAO,IAAI,CAAChB,IAAI,CAACiB,IAAI,CAAa,IAAI,CAACd,MAAM,EAAEa,UAAU,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACZ,UAAU;IAAE,CAAE,CAAC;EAC5F;EAEAa,mBAAmBA,CAAEH,UAAsB;IACzC,OAAO,IAAI,CAAChB,IAAI,CAACoB,GAAG,CAAC,GAAG,IAAI,CAACjB,MAAM,EAAE,EAAEa,UAAU,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACZ,UAAU;IAAE,CAAE,CAAC;EACpF;EAEAe,iBAAiBA,CAAET,EAAU;IAC3B,OAAO,IAAI,CAACZ,IAAI,CAACsB,MAAM,CAAC,GAAG,IAAI,CAACnB,MAAM,IAAIS,EAAE,EAAE,EAAE;MAAEM,OAAO,EAAE,IAAI,CAACZ,UAAU;IAAE,CAAE,CAAC;EACjF;EAEAiB,gBAAgBA,CAAEC,GAAW;IAC3B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACpB,YAAY,IAAImB,GAAG,OAAO;IAC9C,OAAO,IAAI,CAACxB,IAAI,CAACU,GAAG,CAAMe,GAAG,CAAC;EAChC;EAAC,QAAAC,CAAA,G;qBAzCU5B,iBAAiB,EAAA6B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA,GAAAL,EAAA,CAAAC,QAAA,CAAAK,EAAA,CAAAC,SAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBrC,iBAAiB;IAAAsC,OAAA,EAAjBtC,iBAAiB,CAAAuC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}