{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"../servicos/auth.service\";\nexport class LocalidadeService {\n  constructor(http, authService) {\n    this.http = http;\n    this.authService = authService;\n    this.apiUrl = 'http://localhost:5000/api/localidade';\n    this.apiViaCepUrl = 'https://viacep.com.br/ws';\n  }\n  getHeaders() {\n    const token = this.authService.getToken();\n    return new HttpHeaders({\n      'Content-Type': 'application/json',\n      'Authorization': `Bearer ${token}`\n    });\n  }\n  listarLocalidades() {\n    return this.http.get(this.apiUrl);\n  }\n  obterLocalidadePorId(id) {\n    return this.http.get(`${this.apiUrl}/${id}`);\n  }\n  obterLocalidadesPorLogradouro(logradouro) {\n    return this.http.get(`${this.apiUrl}/por-logradouro/${logradouro}`);\n  }\n  salvarLocalidade(Localidade) {\n    return this.http.post(this.apiUrl, Localidade, {\n      headers: this.getHeaders()\n    });\n  }\n  atualizarLocalidade(Localidade) {\n    return this.http.put(`${this.apiUrl}`, Localidade, {\n      headers: this.getHeaders()\n    });\n  }\n  excluirLocalidade(id) {\n    return this.http.delete(`${this.apiUrl}/${id}`, {\n      headers: this.getHeaders()\n    });\n  }\n  obterDetalhesCEP(cep) {\n    const url = `${this.apiViaCepUrl}/${cep}/json`;\n    return this.http.get(url);\n  }\n  static #_ = this.ɵfac = function LocalidadeService_Factory(t) {\n    return new (t || LocalidadeService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.AuthService));\n  };\n  static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: LocalidadeService,\n    factory: LocalidadeService.ɵfac,\n    providedIn: 'root'\n  });\n}","map":{"version":3,"names":["HttpHeaders","LocalidadeService","constructor","http","authService","apiUrl","apiViaCepUrl","getHeaders","token","getToken","listarLocalidades","get","obterLocalidadePorId","id","obterLocalidadesPorLogradouro","logradouro","salvarLocalidade","Localidade","post","headers","atualizarLocalidade","put","excluirLocalidade","delete","obterDetalhesCEP","cep","url","_","i0","ɵɵinject","i1","HttpClient","i2","AuthService","_2","factory","ɵfac","providedIn"],"sources":["C:\\Users\\belfe\\OneDrive\\Área de Trabalho\\avaliacao\\avaliacao-dotnet_angular\\site\\src\\app\\servicos\\localidade.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\r\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\r\nimport { BehaviorSubject, Observable } from 'rxjs';\r\nimport { Localidade } from '../modelos/localidade';\r\nimport { AuthService } from '../servicos/auth.service';\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class LocalidadeService {\r\n  private apiUrl = 'http://localhost:5000/api/localidade';\r\n  private apiViaCepUrl = 'https://viacep.com.br/ws';\r\n\r\n  constructor(private http: HttpClient, private authService: AuthService) { }\r\n\r\n  private getHeaders(): HttpHeaders {\r\n    const token = this.authService.getToken();\r\n    return new HttpHeaders({\r\n      'Content-Type': 'application/json',\r\n      'Authorization': `Bearer ${token}`\r\n    });\r\n  }\r\n\r\n  listarLocalidades(): Observable<Localidade[]> {\r\n    return this.http.get<Localidade[]>(this.apiUrl);\r\n  }\r\n\r\n  obterLocalidadePorId(id: string): Observable<Localidade> {\r\n    return this.http.get<Localidade>(`${this.apiUrl}/${id}`);\r\n  }\r\n\r\n  obterLocalidadesPorLogradouro(logradouro: string): Observable<Localidade[]> {\r\n    return this.http.get<Localidade[]>(`${this.apiUrl}/por-logradouro/${logradouro}`);\r\n  }\r\n\r\n  salvarLocalidade(Localidade: Localidade): Observable<Localidade> {\r\n    return this.http.post<Localidade>(this.apiUrl, Localidade, { headers: this.getHeaders() });\r\n  }\r\n\r\n  atualizarLocalidade(Localidade: Localidade): Observable<any> {\r\n    return this.http.put(`${this.apiUrl}`, Localidade, { headers: this.getHeaders() });\r\n  }\r\n\r\n  excluirLocalidade(id: string): Observable<any> {\r\n    return this.http.delete(`${this.apiUrl}/${id}`, { headers: this.getHeaders() });\r\n  }\r\n\r\n  obterDetalhesCEP(cep: string): Observable<any> {\r\n    const url = `${this.apiViaCepUrl}/${cep}/json`;\r\n    return this.http.get<any>(url);\r\n  }\r\n}"],"mappings":"AACA,SAAqBA,WAAW,QAAQ,sBAAsB;;;;AAQ9D,OAAM,MAAOC,iBAAiB;EAI5BC,YAAoBC,IAAgB,EAAUC,WAAwB;IAAlD,KAAAD,IAAI,GAAJA,IAAI;IAAsB,KAAAC,WAAW,GAAXA,WAAW;IAHjD,KAAAC,MAAM,GAAG,sCAAsC;IAC/C,KAAAC,YAAY,GAAG,0BAA0B;EAEyB;EAElEC,UAAUA,CAAA;IAChB,MAAMC,KAAK,GAAG,IAAI,CAACJ,WAAW,CAACK,QAAQ,EAAE;IACzC,OAAO,IAAIT,WAAW,CAAC;MACrB,cAAc,EAAE,kBAAkB;MAClC,eAAe,EAAE,UAAUQ,KAAK;KACjC,CAAC;EACJ;EAEAE,iBAAiBA,CAAA;IACf,OAAO,IAAI,CAACP,IAAI,CAACQ,GAAG,CAAe,IAAI,CAACN,MAAM,CAAC;EACjD;EAEAO,oBAAoBA,CAACC,EAAU;IAC7B,OAAO,IAAI,CAACV,IAAI,CAACQ,GAAG,CAAa,GAAG,IAAI,CAACN,MAAM,IAAIQ,EAAE,EAAE,CAAC;EAC1D;EAEAC,6BAA6BA,CAACC,UAAkB;IAC9C,OAAO,IAAI,CAACZ,IAAI,CAACQ,GAAG,CAAe,GAAG,IAAI,CAACN,MAAM,mBAAmBU,UAAU,EAAE,CAAC;EACnF;EAEAC,gBAAgBA,CAACC,UAAsB;IACrC,OAAO,IAAI,CAACd,IAAI,CAACe,IAAI,CAAa,IAAI,CAACb,MAAM,EAAEY,UAAU,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACZ,UAAU;IAAE,CAAE,CAAC;EAC5F;EAEAa,mBAAmBA,CAACH,UAAsB;IACxC,OAAO,IAAI,CAACd,IAAI,CAACkB,GAAG,CAAC,GAAG,IAAI,CAAChB,MAAM,EAAE,EAAEY,UAAU,EAAE;MAAEE,OAAO,EAAE,IAAI,CAACZ,UAAU;IAAE,CAAE,CAAC;EACpF;EAEAe,iBAAiBA,CAACT,EAAU;IAC1B,OAAO,IAAI,CAACV,IAAI,CAACoB,MAAM,CAAC,GAAG,IAAI,CAAClB,MAAM,IAAIQ,EAAE,EAAE,EAAE;MAAEM,OAAO,EAAE,IAAI,CAACZ,UAAU;IAAE,CAAE,CAAC;EACjF;EAEAiB,gBAAgBA,CAACC,GAAW;IAC1B,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACpB,YAAY,IAAImB,GAAG,OAAO;IAC9C,OAAO,IAAI,CAACtB,IAAI,CAACQ,GAAG,CAAMe,GAAG,CAAC;EAChC;EAAC,QAAAC,CAAA,G;qBAzCU1B,iBAAiB,EAAA2B,EAAA,CAAAC,QAAA,CAAAC,EAAA,CAAAC,UAAA,GAAAH,EAAA,CAAAC,QAAA,CAAAG,EAAA,CAAAC,WAAA;EAAA;EAAA,QAAAC,EAAA,G;WAAjBjC,iBAAiB;IAAAkC,OAAA,EAAjBlC,iBAAiB,CAAAmC,IAAA;IAAAC,UAAA,EAFhB;EAAM"},"metadata":{},"sourceType":"module","externalDependencies":[]}